% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/combineCosts.R
\name{combineCosts}
\alias{combineCosts}
\title{Combine the costs of two gGraph objects}
\usage{
combineCosts(x1, x2, method = c("sum", "product", "function"), FUN = NULL, ...)
}
\arguments{
\item{x1}{The firt gGraph (which will be used as a template to build the combined gGraph)}

\item{x2}{The second gGraph from which costs will be combined}

\item{method}{a character string indicating which method should be used to
combined edge cost from the two gGraph. Currently available options are 'sum',
'prod' and 'function', where the combined costs are computed as the sum,
the product or a custom function (defined in \code{FUN}) of the costs of its nodes.}

\item{FUN}{a function used to compute the cost between two nodes (needed if \code{method="function"}).}

\item{\dots}{additional parameters to be passed to \code{FUN}.}
}
\value{
A \linkS4class{gGraph} object with the newly defined costs, basedd on the combination of the
two gGraph objects, used as weightings of edges.
}
\description{
The function \code{combineCosts} combines the edge costs of two
\linkS4class{gGraph} objects. The first object is used as a temlate to generate
the objects with the combined costs. Two two \linkS4class{gGraph} objects must
have the same edges.
}
\details{
Note that costs are inversely proportional to connectivity between edges:
the larger the cost associated to an edge, the lower the connectivity
between the two concerned nodes.\cr

Also note that 'costs' defined in \code{geoGraph} are equivalent to
'weights' as defined in \code{graph} and \code{RBGL} packages.
}
\examples{
data("worldgraph.40k")
# new graph with custom cost function
exp.cost <- function(x1, x2, cost.coeff) {
 exp(-abs(x1 - x2) * cost.coeff)
}
# create a set of node costs
worldgraph.40k@nodes.attr$meanProd<-runif(n=40962)
new_costs_graph <-
  setCosts(
    worldgraph.40k,
    node.values = worldgraph.40k@nodes.attr$meanProd,
    method = "function",
    FUN = exp.cost,
    cost.coeff = 0.5
  )
# combine costs from the original graph with the new costs
combine_costs_graph<- combineCosts(worldgraph.40k, new_costs_graph, method="sum")
}
